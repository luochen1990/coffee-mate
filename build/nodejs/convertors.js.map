{"version":3,"file":"convertors.js","sources":["convertors.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA;;EAAA,WAAA,GAAc,SAAA;AACb,QAAA;IAAA,GAAA,GAAM,SAAC,CAAD,EAAI,IAAJ;AAAa,UAAA;MAAA,IAAG,OAAO,CAAP,KAAa,QAAhB;QAA+B,CAAA,GAAI,QAAA,CAAS,CAAT,EAAY,IAAZ;QAAmB,IAAA,CAAA,CAAO,iBAAA,IAAa,CAAA,KAAK,QAAA,CAAS,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAU,CAAC,CAAX,CAAT,EAAwB,IAAxB,CAAzB,CAAA;iBAA4D,EAA5D;SAAA,MAAA;iBAAmE,KAAnE;SAAtD;OAAA,MAAA;eAAoI,QAAA,CAAS,CAAA,GAAI,CAAb,EAApI;;IAAb;IACN,KAAA,GAAQ,SAAC,CAAD;MAAO,IAAG,sCAAsC,CAAC,IAAvC,CAA4C,CAA5C,CAAH;eAAuD,UAAA,CAAW,CAAX,EAAvD;OAAA,MAAA;eAA0E,KAA1E;;IAAP;IACR,GAAA,GAAM,SAAC,CAAD,EAAI,IAAJ;aAAa,CAAC,CAAC,QAAF,CAAW,IAAX;IAAb;IACN,IAAA,GAAO,SAAC,CAAD;MAAO,IAAG,CAAA,KAAM,IAAN,IAAA,CAAA,KAAY,KAAf;eAA2B,EAA3B;OAAA,MAAA;eAAkC,KAAlC;;IAAP;IACP,GAAA,GAAM,SAAC,CAAD;aAAO,CAAC,CAAC,QAAF,CAAW,EAAX;IAAP;IACN,GAAA,GAAM,SAAC,CAAD;aAAO,CAAC,CAAC,UAAF,CAAA;IAAP;IACN,GAAA,GAAM,SAAC,CAAD;aAAO,MAAM,CAAC,YAAP,CAAoB,CAApB;IAAP;IACN,IAAA,GAAO,SAAC,EAAD;aAAQ,IAAI,CAAC,SAAL,CAAe,EAAf;IAAR;IACP,QAAA,GAAW,SAAC,MAAD,EAAS,SAAT;aAAuB,SAAC,EAAD;eAAQ,IAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,SAAnB,EAA8B,MAA9B;MAAR;IAAvB;IACX,UAAA,GAAa,SAAC,EAAD;aAAQ,IAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,IAAnB,EAAyB,CAAzB;IAAR;IACb,QAAA,GAAc,CAAA,SAAA;AACb,UAAA;MAAA,IAAA,GAAO,SAAC,CAAD,EAAI,CAAJ;QAAU,IAAG,OAAO,CAAP,KAAY,QAAf;AAA8B;mBAAI,IAAI,CAAC,KAAL,CAAW,CAAX,EAAJ;WAAA,aAAA;mBAA6B,EAA7B;WAA9B;SAAA,MAAA;iBAAmE,EAAnE;;MAAV;aACP,SAAC,EAAD;eAAQ,IAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,IAAnB,EAAyB,CAAzB;MAAR;IAFa,CAAA,CAAH,CAAA;IAGX,GAAA,GAAM,SAAC,CAAD;aAAO,IAAI,CAAC,KAAL,CAAW,CAAX;IAAP;AAEN,WAAO;MACN,KAAA,GADM;MACD,OAAA,KADC;MACM,MAAA,IADN;MACY,KAAA,GADZ;MACiB,KAAA,GADjB;MACsB,KAAA,GADtB;MAC2B,KAAA,GAD3B;MACgC,MAAA,IADhC;MACsC,UAAA,QADtC;MACgD,YAAA,UADhD;MAC4D,UAAA,QAD5D;MACsE,KAAA,GADtE;;EAhBM;;EAoBd,MAAM,CAAC,OAAP,GAAiB,WAAA,CAAA;AApBjB","sourcesContent":["this_module = () ->\n\tint = (s, base) -> if typeof(s) == 'string' then (r = parseInt(s, base); unless s.slice? and r == parseInt(s.slice(0,-1), base) then r else null) else parseInt(0 + s)\n\tfloat = (s) -> if /^-?[0-9]*(\\.[0-9]+)?([eE]-?[0-9]+)?$/.test(s) then parseFloat(s) else null\n\tstr = (x, base) -> x.toString(base)\n\tbool = (x) -> if x in [true, false] then x else null\n\thex = (x) -> x.toString(16)\n\tord = (c) -> c.charCodeAt()\n\tchr = (x) -> String.fromCharCode(x)\n\tjson = (it) -> JSON.stringify(it)\n\tjsonWith = (indent, convertor) -> (it) -> JSON.stringify(it, convertor, indent)\n\tprettyJson = (it) -> JSON.stringify(it, null, 4)\n\tflatJson = do ->\n\t\tflat = (k, v) -> if typeof v is 'string' then (try JSON.parse(v) catch then v) else v\n\t\t(it) -> JSON.stringify(it, flat, 4)\n\tobj = (s) -> JSON.parse(s)\n\n\treturn {\n\t\tint, float, bool, str, hex, ord, chr, json, jsonWith, prettyJson, flatJson, obj,\n\t}\n\nmodule.exports = this_module()\n\n"]}