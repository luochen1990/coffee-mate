{"version":3,"sources":["convertors.coffee"],"names":[],"mappings":"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","file":"convertors.js","sourceRoot":"/source/","sourcesContent":["this_module = () ->\n\tint = (s, base) -> if typeof(s) == 'string' then (r = parseInt(s, base); unless s.slice? and r == parseInt(s.slice(0,-1), base) then r else null) else parseInt(0 + s)\n\tfloat = (s) -> if /^-?[0-9]*(\\.[0-9]+)?([eE]-?[0-9]+)?$/.test(s) then parseFloat(s) else null\n\tstr = (x, base) -> x.toString(base)\n\tbool = (x) -> if x in [true, false] then x else null\n\thex = (x) -> x.toString(16)\n\tord = (c) -> c.charCodeAt()\n\tchr = (x) -> String.fromCharCode(x)\n\tjson = (it) -> JSON.stringify(it)\n\tjsonWith = (indent, convertor) -> (it) -> JSON.stringify(it, convertor, indent)\n\tprettyJson = (it) -> JSON.stringify(it, null, 4)\n\tflatJson = do ->\n\t\tflat = (k, v) -> if typeof v is 'string' then (try JSON.parse(v) catch then v) else v\n\t\t(it) -> JSON.stringify(it, flat, 4)\n\tobj = (s) -> JSON.parse(s)\n\n\treturn {\n\t\tint, float, bool, str, hex, ord, chr, json, jsonWith, prettyJson, flatJson, obj,\n\t}\n\nmodule.exports = this_module()\n\n"]}