{"version":3,"sources":["utils.coffee"],"names":[],"mappings":"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","file":"utils.js","sourceRoot":"/source/","sourcesContent":["this_module = () ->\n\tfunction_literal = (f) ->\n\t\texpr = f.toString().replace(/^\\s*function\\s?\\(\\s?\\)\\s?{\\s*return\\s*([^]*?);?\\s*}$/, '$1')\n\t\texpr = expr.replace(/[\\r\\n]{1,2}\\s*/g, '') if expr.length <= 100\n\t\treturn expr\n\n\ttime_now = ->\n\t\t(new Date).getTime()\n\n\tlog = do -> #log an expression with it's literal and time used\n\t\tdye = do ->\n\t\t\t# ANSI Terminal Colors.\n\t\t\tcavailable = (not window?) and process? and not process.env.NODE_DISABLE_COLORS\n\t\t\tpalette =\n\t\t\t\tbold: '\\x1B[0;1m'\n\t\t\t\tred: '\\x1B[0;31m'\n\t\t\t\tgreen: '\\x1B[0;32m'\n\t\t\t\tyellow: '\\x1B[0;33m'\n\t\t\t\tblue: '\\x1B[0;34m'\n\t\t\t\tbold_grey: '\\x1B[1;30m'\n\t\t\tif not cavailable\n\t\t\t\t(color) -> (s) -> s\n\t\t\telse\n\t\t\t\t(color) ->\n\t\t\t\t\t(s) -> \"#{palette[color]}#{s}#{'\\x1B[0m'}\"\n\n\t\tlog_label = do ->\n\t\t\tflag_palette =\n\t\t\t\t'#': 'bold_grey'\n\t\t\t\t'I': 'green'\n\t\t\t\t'E': 'red'\n\t\t\t\t'W': 'yellow'\n\t\t\top_flag = (op) ->\n\t\t\t\tif op == 'log' then '#' else op[0].toUpperCase()\n\t\t\t(op) ->\n\t\t\t\tflag = op_flag(op)\n\t\t\t\tdye(flag_palette[flag]) flag\n\n\t\thistories = []\n\t\tfactory = (op) ->\n\t\t\tprefix = \"#{dye('bold_grey') '#'}#{log_label op}\"\n\t\t\t(args...) ->\n\t\t\t\tball = []\n\t\t\t\tfor f in args\n\t\t\t\t\tif typeof f == 'function'\n\t\t\t\t\t\texpr = function_literal(f)\n\t\t\t\t\t\tstart_time = time_now()\n\t\t\t\t\t\teval_result = f()\n\t\t\t\t\t\ttime_used = time_now() - start_time\n\t\t\t\t\t\tball.push(\"#{prefix} #{dye('green') expr} #{dye('bold_grey') '==>'}\", eval_result)\n\t\t\t\t\t\tball.push(dye('yellow') \"[#{time_used}ms]\") if time_used > 0\n\t\t\t\t\telse\n\t\t\t\t\t\tball.push(\"#{prefix}\", f)\n\t\t\t\tconsole[op] ball...\n\t\t\t\thistories.push(ball)\n\t\t\t\thistories.shift() if histories.length >= 10\n\t\t\t\treturn null\n\t\tgot = factory('log')\n\t\tgot.histories = histories\n\t\tgot.info = factory('info')\n\t\tgot.warn = factory('warn')\n\t\tgot.error = got.err = factory('error')\n\t\treturn got\n\n\tassert = (f, msg) ->\n\t\t[f, msg] = [msg, f] if f not instanceof Function\n\t\ttry\n\t\t\tr = f()\n\t\tcatch e\n\t\t\tthrow Error \"Assertion #{msg ? function_literal(f)} Unknown:\\n#{e}\"\n\t\tif not r\n\t\t\tthrow Error \"Assertion #{msg ? function_literal(f)} Failed!\"\n\n\tassertEq = (l, r) ->\n\t\ttry\n\t\t\tlv = l()\n\t\t\trv = r()\n\t\tcatch e\n\t\t\tthrow Error \"Equation Between #{function_literal(l)} And #{function_literal(r)} Unknown:\\n#{e}\"\n\t\tif lv isnt rv\n\t\t\tthrow Error \"Equation Failed:\\n\\t#{function_literal(l)} IS #{lv} BUT\\n\\t#{function_literal(r)} IS #{rv}.\"\n\n\tassertEqOn = (f) -> (l, r) ->\n\t\ttry\n\t\t\tlv = l()\n\t\t\trv = r()\n\t\t\tflv = f(lv)\n\t\t\tfrv = f(rv)\n\t\tcatch e\n\t\t\tthrow Error \"MAPPED Equation Between #{function_literal(l)} And #{function_literal(r)} Unknown:\\n#{e}\"\n\t\tif flv isnt frv\n\t\t\tthrow Error \"Equation Failed:\\n\\t#{function_literal(l)} IS #{lv} AND MAPPED TO #{flv} BUT\\n\\t#{function_literal(r)} IS #{rv} AND MAPPED TO #{frv}.\"\n\n\tsecurely = (f) -> # ensure a function not to modify it's arguments\n\t\t(args...) ->\n\t\t\targs = deepcopy args\n\t\t\tf(args...)\n\n\tdict = (pairs) -> #for dict comprehensions\n\t\td = {}\n\t\td[k] = v for [k, v] in pairs\n\t\treturn d\n\n\t{copy, deepcopy} = do ->\n\t\tcp = (root, dep) ->\n\t\t\treturn root if dep == 0 or not root? or typeof(root) != 'object'\n\t\t\tif root instanceof Array\n\t\t\t\tr = (cp(v, dep-1) for v in root)\n\t\t\telse\n\t\t\t\tr = {}\n\t\t\t\tr[k] = cp(v, dep-1) for k, v of root\n\t\t\treturn r\n\t\tcopy: (obj, depth=1) -> cp(obj, depth)\n\t\tdeepcopy: (obj, depth=Infinity) -> cp(obj, depth)\n\n\textend = (base) -> (defaults...) -> #NOTE: modified inplace, use copy() to protect it.\n\t\tfor d in defaults when d?\n\t\t\tbase[k] ?= v for k, v of d #NOTE: null values will be replaced if a default value exists.\n\t\treturn base\n\n\tupdate = (base) -> (updates...) -> #NOTE: modified inplace, use copy() to protect it.\n\t\tfor d in updates when d?\n\t\t\tbase[k] = v for k, v of d\n\t\treturn base\n\n\toverload = (_d) ->\n\t\td = copy _d\n\t\tfallback = d['_']\n\t\tif fallback?\n\t\t\t(args...) ->\n\t\t\t\t(d[args.length] ? fallback) args...\n\t\telse\n\t\t\t(args...) ->\n\t\t\t\tf = d[args.length]\n\t\t\t\tif not f?\n\t\t\t\t\tthrow Error \"This Function Can't Accept #{args.length} Args\"\n\t\t\t\telse\n\t\t\t\t\treturn f args...\n\n\treturn {\n\t\tlog, assert, assertEq, assertEqOn, dict, copy, deepcopy, securely, extend, update, overload,\n\t}\n\nmodule.exports = this_module()\n\n"]}