{"version":3,"sources":["basics.coffee"],"names":[],"mappings":"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","file":"basics.js","sourceRoot":"/source/","sourcesContent":["this_module = ({best}) ->\n\t# transformers\n\tflip = (f) ->\n\t\t(x) -> (y) -> f(y)(x)\n\n\tcombine = (f) -> (g) ->\n\t\t(x) -> f g(x)\n\n\tcurry2 = (f) ->\n\t\t(a) -> (b) -> f(a, b)\n\n\tcurry3 = (f) ->\n\t\t(a) -> (b) -> (c) -> f(a, b, c)\n\n\tuncurry2 = (f) ->\n\t\t(a, b) -> f(a)(b)\n\n\tuncurry3 = (f) ->\n\t\t(a, b, c) -> f(a)(b)(c)\n\n\tpack = (f) ->\n\t\t(arr) -> f(arr...)\n\n\tunpack = (f) ->\n\t\t(arr...) -> f(arr)\n\n\t# seek & pluck in Array or Object\n\tseek = (arr) ->\n\t\t(i) -> arr[i]\n\n\tpluck = (attr) ->\n\t\t(d) -> d[attr]\n\n\t# compare\n\tequal = (it) ->\n\t\t(x) -> x == it\n\n\tnotEqual = (it) ->\n\t\t(x) -> x != it\n\n\tlessThan = (it) ->\n\t\t(x) -> x < it\n\n\tgreaterThan = (it) ->\n\t\t(x) -> x > it\n\n\tlessEqual = (it) ->\n\t\t(x) -> x <= it\n\n\tgreaterEqual = (it) ->\n\t\t(x) -> x >= it\n\n\t# math\n\tplus = (it) ->\n\t\t(x) -> x + it\n\n\tminus = (it) ->\n\t\t(x) -> x - it\n\n\tabs = Math.abs\n\tfloor = Math.floor\n\tceil = Math.ceil\n\n\tprecise = (n) ->\n\t\t(x) -> parseFloat x.toPrecision(n)\n\n\taccept_multi_or_array = (f) ->\n\t\t(arr...) ->\n\t\t\tf(if arr.length == 1 and arr.first instanceof Array then arr.first else arr)\n\n\tsum = accept_multi_or_array (arr) ->\n\t\tarr = arr.first if arr.length == 1 and arr.first instanceof Array\n\t\tr = 0\n\t\tr += x for x in arr\n\t\tr\n\n\tmax = accept_multi_or_array (arr) ->\n\t\tbest((a, b) -> a > b) arr\n\n\tmin = accept_multi_or_array (arr) ->\n\t\tbest((a, b) -> a < b) arr\n\n\tmax_index = accept_multi_or_array (arr) ->\n\t\tbest((i, j) -> arr[i] > arr[j]) [0...arr.length]\n\n\tmin_index = accept_multi_or_array (arr) ->\n\t\tbest((i, j) -> arr[i] < arr[j]) [0...arr.length]\n\n\treturn {\n\t\tflip, combine,\n\t\tcurry2, curry3, uncurry2, uncurry3, pack, unpack,\n\t\tseek, pluck,\n\t\tequal, notEqual, lessThan, lessEqual, greaterThan, greaterEqual,\n\t\tplus, minus, abs, floor, ceil, precise,\n\t\tsum, max, min, max_index, min_index,\n\t}\n\nmodule.exports = this_module\n\tbest: require('lazy.coffee').best\n\n"]}