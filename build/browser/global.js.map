{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/global.coffee","node_modules/browserify/node_modules/process/browser.js","node_modules/lazy-list/build/nodejs/lazy.js","src/basics.coffee","src/coffee-mate.coffee","src/convertors.coffee","src/funny.coffee","src/url-helpers.coffee","src/utils.coffee"],"names":[],"mappingslKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlfile":"global.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var k, mate, v;\n\nmate = require('./coffee-mate');\n\nfor (k in mate) {\n  v = mate[k];\n  global[k] = v;\n}\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcZ2xvYmFsLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTHVvXFxHaXRodWJcXGNvZmZlZS1tYXRlXFxzcmNcXGdsb2JhbC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBQTs7QUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLGVBQVI7O0FBQ1AsS0FBQSxTQUFBOztFQUFBLE1BQU8sQ0FBQSxDQUFBLENBQVAsR0FBWTtBQUFaIn0=\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function() {\n  var this_module,\n    slice = [].slice;\n\n  this_module = function(arg) {\n    var CustomErrorType, Iterator, LazyList, ListError, Symbol, all, any, best, brk, cartProd, concat, cons, drop, dropWhile, enumerate, filter, foldl, foreach, fromList, groupOn, head, iterate, last, lazy, length, list, map, maximum, maximumOn, minimum, minimumOn, naturals, nil, partition, permutations, primes, randoms, range, ref, repeat, reverse, scanl, sort, sortOn, streak, streak2, superset, tail, take, takeWhile, zip, zipWith;\n    Symbol = arg.Symbol;\n    CustomErrorType = function(errorName) {\n      return function(msg) {\n        var CustomError;\n        CustomError = function(msg) {\n          var self;\n          self = new Error(msg);\n          self.name = errorName;\n          self.__proto__ = CustomError.prototype;\n          return self;\n        };\n        CustomError.prototype.__proto__ = Error.prototype;\n        return new CustomError(msg);\n      };\n    };\n    ListError = CustomErrorType('ListError');\n    LazyList = function(f) {\n      f[Symbol.iterator] = function() {\n        return f();\n      };\n      f.toString = function() {\n        return \"LazyList\";\n      };\n      f.toJSON = function() {\n        return list(f);\n      };\n      return f;\n    };\n    nil = LazyList(function() {\n      return nil;\n    });\n    nil.toString = function() {\n      return 'nil';\n    };\n    Iterator = function(it) {\n      it.next = function() {\n        var r;\n        r = it();\n        return {\n          value: r,\n          done: r === nil\n        };\n      };\n      it.toString = function() {\n        return \"Iterator\";\n      };\n      return it;\n    };\n    naturals = LazyList(function() {\n      var i;\n      i = -1;\n      return Iterator(function() {\n        return ++i;\n      });\n    });\n    range = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (args.length === 0) {\n        return naturals;\n      } else if (args.length === 1) {\n        return LazyList(function() {\n          var i, stop;\n          stop = args[0];\n          i = -1;\n          return Iterator(function() {\n            if (++i < stop) {\n              return i;\n            } else {\n              return nil;\n            }\n          });\n        });\n      } else if (args.length === 2) {\n        return LazyList(function() {\n          var i, start, stop;\n          start = args[0], stop = args[1];\n          if (start < stop) {\n            i = start - 1;\n            return Iterator(function() {\n              if (++i < stop) {\n                return i;\n              } else {\n                return nil;\n              }\n            });\n          } else {\n            i = start + 1;\n            return Iterator(function() {\n              if (--i > stop) {\n                return i;\n              } else {\n                return nil;\n              }\n            });\n          }\n        });\n      } else {\n        return LazyList(function() {\n          var i, start, step, stop;\n          start = args[0], stop = args[1], step = args[2];\n          if (stop !== start && (stop - start) * step < 0) {\n            throw ListError('ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE');\n          }\n          i = start - step;\n          if (start < stop) {\n            return Iterator(function() {\n              if ((i += step) < stop) {\n                return i;\n              } else {\n                return nil;\n              }\n            });\n          } else {\n            return Iterator(function() {\n              if ((i += step) > stop) {\n                return i;\n              } else {\n                return nil;\n              }\n            });\n          }\n        });\n      }\n    };\n    primes = LazyList(function() {\n      return filter(function(x) {\n        return all(function(p) {\n          return x % p !== 0;\n        })(takeWhile(function(p) {\n          return p * p <= x;\n        })(range(2, 2e308)));\n      })(range(2, 2e308))();\n    });\n    lazy = function(xs) {\n      var ref;\n      if (typeof xs === 'function') {\n        if (xs[Symbol.iterator] != null) {\n          return xs;\n        } else {\n          return LazyList(xs);\n        }\n      } else if ((ref = xs.constructor) === Array || ref === String) {\n        return LazyList(function() {\n          var i;\n          i = -1;\n          return Iterator(function() {\n            if ((++i) < xs.length) {\n              return xs[i];\n            } else {\n              return nil;\n            }\n          });\n        });\n      } else if (xs[Symbol.iterator] != null) {\n        return LazyList(function() {\n          var it;\n          it = xs[Symbol.iterator]();\n          return Iterator(function() {\n            var r;\n            r = it.next();\n            if (r.done) {\n              return nil;\n            } else {\n              return r.value;\n            }\n          });\n        });\n      } else {\n        throw ListError('lazy(xs): xs is neither Array nor Iterable');\n      }\n    };\n    enumerate = function(it) {\n      if ((it[Symbol.iterator] != null) || it instanceof Array) {\n        return zip(naturals, it);\n      } else {\n        return LazyList(function() {\n          var i, keys;\n          keys = Object.keys(it);\n          i = -1;\n          return Iterator(function() {\n            var k;\n            if (++i < keys.length) {\n              return [(k = keys[i]), it[k]];\n            } else {\n              return nil;\n            }\n          });\n        });\n      }\n    };\n    repeat = function(x) {\n      return LazyList(function() {\n        return Iterator(function() {\n          return x;\n        });\n      });\n    };\n    iterate = function(next, init) {\n      return LazyList(function() {\n        var st;\n        st = init;\n        return Iterator(function() {\n          var r;\n          r = st;\n          st = next(st);\n          return r;\n        });\n      });\n    };\n    randoms = (function() {\n      var hash, normal, salt;\n      salt = Math.PI / 3.0;\n      hash = function(x) {\n        x = Math.sin(x + salt) * 1e4;\n        return x - Math.floor(x);\n      };\n      normal = function(seed) {\n        return iterate(hash, hash(seed));\n      };\n      return function(opts) {\n        var k, ref, ref1, rg, s, seed;\n        if (opts == null) {\n          return normal(0);\n        } else if (typeof opts === 'number') {\n          return normal(opts);\n        } else {\n          seed = (ref = opts.seed) != null ? ref : 0;\n          rg = opts.range;\n          if (rg != null) {\n            if (typeof rg === 'number') {\n              return map(function(x) {\n                return Math.floor(x * rg);\n              })(normal(seed));\n            } else {\n              ref1 = [rg[0], rg[1] - rg[0] + 1], s = ref1[0], k = ref1[1];\n              return map(function(x) {\n                return s + Math.floor(x * k);\n              })(normal(seed));\n            }\n          } else {\n            return normal(seed);\n          }\n        }\n      };\n    })();\n    permutations = (function() {\n      var next_permutation;\n      next_permutation = function(x) {\n        var l, m, r, ref, ref1;\n        x = x.slice(0);\n        l = x.length - 1;\n        while (l >= 1 && x[l] <= x[l - 1]) {\n          --l;\n        }\n        if (l !== 0) {\n          m = x.length - 1;\n          while (m > l - 1 && x[m] <= x[l - 1]) {\n            --m;\n          }\n          ref = [x[l - 1], x[m]], x[m] = ref[0], x[l - 1] = ref[1];\n        }\n        r = x.length - 1;\n        while (l < r) {\n          ref1 = [x[r], x[l]], x[l] = ref1[0], x[r] = ref1[1];\n          ++l;\n          --r;\n        }\n        return x;\n      };\n      return function(xs) {\n        var arr;\n        arr = list(xs);\n        if (arr.length === 0) {\n          return nil;\n        } else {\n          return cons(arr.slice(0))(takeWhile(function(ls) {\n            return json(ls) !== json(arr);\n          })(drop(1)(iterate(next_permutation, arr))));\n        }\n      };\n    })();\n    superset = function(xs) {\n      var ss;\n      if (length(xs) === 0) {\n        return [[]];\n      } else {\n        ss = superset(drop(1)(xs));\n        return concat([ss, map(cons(head(xs)))(ss)]);\n      }\n    };\n    take = function(n) {\n      return function(xs) {\n        return LazyList(function() {\n          var c, iter;\n          iter = lazy(xs)[Symbol.iterator]();\n          c = -1;\n          return Iterator(function() {\n            if (++c < n) {\n              return iter();\n            } else {\n              return nil;\n            }\n          });\n        });\n      };\n    };\n    takeWhile = function(ok) {\n      return function(xs) {\n        return LazyList(function() {\n          var iter;\n          iter = lazy(xs)[Symbol.iterator]();\n          return Iterator(function() {\n            var x;\n            if ((x = iter()) !== nil && ok(x)) {\n              return x;\n            } else {\n              return nil;\n            }\n          });\n        });\n      };\n    };\n    drop = function(n) {\n      return function(xs) {\n        return LazyList(function() {\n          var finished, i, iter, j, ref;\n          iter = lazy(xs)[Symbol.iterator]();\n          finished = false;\n          for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            finished || (finished = iter() === nil);\n            if (finished) {\n              break;\n            }\n          }\n          if (finished) {\n            return function() {\n              return nil;\n            };\n          } else {\n            return iter;\n          }\n        });\n      };\n    };\n    dropWhile = function(ok) {\n      return function(xs) {\n        return LazyList(function() {\n          var iter, x;\n          iter = lazy(xs)[Symbol.iterator]();\n          while (ok(x = iter()) && x !== nil) {\n            null;\n          }\n          return Iterator(function() {\n            var prevx, ref;\n            ref = [x, iter()], prevx = ref[0], x = ref[1];\n            return prevx;\n          });\n        });\n      };\n    };\n    cons = function(x) {\n      return function(xs) {\n        return LazyList(function() {\n          var iter;\n          iter = null;\n          return Iterator(function() {\n            if (iter === null) {\n              iter = lazy(xs)[Symbol.iterator]();\n              return x;\n            } else {\n              return iter();\n            }\n          });\n        });\n      };\n    };\n    map = function(f) {\n      return function(xs) {\n        return LazyList(function() {\n          var iter;\n          iter = lazy(xs)[Symbol.iterator]();\n          return Iterator(function() {\n            var x;\n            if ((x = iter()) !== nil) {\n              return f(x);\n            } else {\n              return nil;\n            }\n          });\n        });\n      };\n    };\n    filter = function(ok) {\n      return function(xs) {\n        return LazyList(function() {\n          var iter;\n          iter = lazy(xs)[Symbol.iterator]();\n          return Iterator(function() {\n            var x;\n            while ((x = iter()) !== nil && !ok(x)) {\n              null;\n            }\n            return x;\n          });\n        });\n      };\n    };\n    scanl = function(op) {\n      return function(r) {\n        return function(xs) {\n          return LazyList(function() {\n            var iter;\n            iter = lazy(xs)[Symbol.iterator]();\n            return Iterator(function() {\n              var got, x;\n              got = r;\n              r = (x = iter()) !== nil ? op(r)(x) : nil;\n              return got;\n            });\n          });\n        };\n      };\n    };\n    streak = function(n) {\n      if (n < 1) {\n        return nil;\n      } else {\n        return function(xs) {\n          return drop(n - 1)(LazyList(function() {\n            var buf, iter;\n            iter = lazy(xs)[Symbol.iterator]();\n            buf = [];\n            return Iterator(function() {\n              var x;\n              if ((x = iter()) === nil) {\n                return nil;\n              }\n              buf.push(x);\n              if (buf.length > n) {\n                buf.shift(1);\n              }\n              return buf.slice(0);\n            });\n          }));\n        };\n      }\n    };\n    streak2 = function(n) {\n      return function(xs) {\n        return streak(n)(concat([xs, take(n - 1)(xs)]));\n      };\n    };\n    reverse = function(xs) {\n      var ref;\n      if ((ref = xs.constructor) === Array || ref === String) {\n        return LazyList(function() {\n          var i;\n          i = xs.length;\n          return Iterator(function() {\n            if ((--i) >= 0) {\n              return xs[i];\n            } else {\n              return nil;\n            }\n          });\n        });\n      } else {\n        return list(lazy(xs)).reverse();\n      }\n    };\n    sort = function(xs) {\n      var arr;\n      arr = list(lazy(xs));\n      return arr.sort(function(a, b) {\n        return (a > b) - (a < b);\n      });\n    };\n    sortOn = function(f) {\n      return function(xs) {\n        var arr;\n        arr = list(lazy(xs));\n        return arr.sort(function(a, b) {\n          var fa, fb;\n          return ((fa = f(a)) > (fb = f(b))) - (fa < fb);\n        });\n      };\n    };\n    groupOn = function(f) {\n      return function(xs) {\n        var k, memo, v;\n        memo = {};\n        foreach(xs, function(x) {\n          var y;\n          y = f(x);\n          if (memo[y] == null) {\n            memo[y] = [];\n          }\n          return memo[y].push(x);\n        });\n        return (function() {\n          var results;\n          results = [];\n          for (k in memo) {\n            v = memo[k];\n            results.push(v);\n          }\n          return results;\n        })();\n      };\n    };\n    partition = function(f) {\n      return function(xs) {\n        var memo;\n        memo = [[], []];\n        foreach(xs, function(x) {\n          var y;\n          y = !f(x) + 0;\n          return memo[y].push(x);\n        });\n        return memo;\n      };\n    };\n    concat = function(xss) {\n      xss = filter(function(x) {\n        var ref;\n        return ((ref = x.constructor) !== Array && ref !== String) || x.length > 0;\n      })(xss);\n      return LazyList(function() {\n        var iter, xs, xs_iter;\n        xs_iter = lazy(xss)[Symbol.iterator]();\n        xs = xs_iter();\n        iter = lazy(xs)[Symbol.iterator]();\n        return Iterator(function() {\n          var x;\n          if ((x = iter()) !== nil) {\n            return x;\n          } else if ((xs = xs_iter()) !== nil) {\n            iter = lazy(xs)[Symbol.iterator]();\n            return iter();\n          } else {\n            return nil;\n          }\n        });\n      });\n    };\n    ref = (function() {\n      var finished, zip, zipWith;\n      finished = function(arr) {\n        var j, len1, x;\n        for (j = 0, len1 = arr.length; j < len1; j++) {\n          x = arr[j];\n          if (x === nil) {\n            return true;\n          }\n        }\n        return false;\n      };\n      zip = function() {\n        var xss;\n        xss = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return LazyList(function() {\n          var iters, xs;\n          iters = (function() {\n            var j, len1, results;\n            results = [];\n            for (j = 0, len1 = xss.length; j < len1; j++) {\n              xs = xss[j];\n              results.push(lazy(xs)[Symbol.iterator]());\n            }\n            return results;\n          })();\n          return Iterator(function() {\n            var iter, next;\n            next = (function() {\n              var j, len1, results;\n              results = [];\n              for (j = 0, len1 = iters.length; j < len1; j++) {\n                iter = iters[j];\n                results.push(iter());\n              }\n              return results;\n            })();\n            if (finished(next)) {\n              return nil;\n            } else {\n              return next;\n            }\n          });\n        });\n      };\n      zipWith = function(f) {\n        return function() {\n          var xss;\n          xss = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return LazyList(function() {\n            var iters, xs;\n            iters = (function() {\n              var j, len1, results;\n              results = [];\n              for (j = 0, len1 = xss.length; j < len1; j++) {\n                xs = xss[j];\n                results.push(lazy(xs)[Symbol.iterator]());\n              }\n              return results;\n            })();\n            return Iterator(function() {\n              var iter, next;\n              next = (function() {\n                var j, len1, results;\n                results = [];\n                for (j = 0, len1 = iters.length; j < len1; j++) {\n                  iter = iters[j];\n                  results.push(iter());\n                }\n                return results;\n              })();\n              if (finished(next)) {\n                return nil;\n              } else {\n                return f.apply(null, next);\n              }\n            });\n          });\n        };\n      };\n      return {\n        zip: zip,\n        zipWith: zipWith\n      };\n    })(), zip = ref.zip, zipWith = ref.zipWith;\n    cartProd = (function() {\n      var apply_vector, inc_vector;\n      inc_vector = function(limits) {\n        var len_minus_1;\n        len_minus_1 = limits.length - 1;\n        return function(vec) {\n          var i;\n          i = len_minus_1;\n          while (!(++vec[i] < limits[i] || i <= 0)) {\n            vec[i--] = 0;\n          }\n          return vec;\n        };\n      };\n      apply_vector = function(space) {\n        var len;\n        len = space.length;\n        return function(vec) {\n          var i, j, ref1, results;\n          results = [];\n          for (i = j = 0, ref1 = len; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n            results.push(space[i][vec[i]]);\n          }\n          return results;\n        };\n      };\n      return function() {\n        var xss;\n        xss = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return LazyList(function() {\n          var get_value, i, inc, j, len, len1, limits, v, xs;\n          xss = (function() {\n            var j, len1, results;\n            results = [];\n            for (j = 0, len1 = xss.length; j < len1; j++) {\n              xs = xss[j];\n              results.push(list(xs));\n            }\n            return results;\n          })();\n          limits = (function() {\n            var j, ref1, results;\n            results = [];\n            for (i = j = 0, ref1 = xss.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n              results.push(xss[i].length);\n            }\n            return results;\n          })();\n          for (j = 0, len1 = limits.length; j < len1; j++) {\n            len = limits[j];\n            if (len === 0) {\n              return nil;\n            }\n          }\n          inc = inc_vector(limits);\n          get_value = apply_vector(xss);\n          v = (function() {\n            var o, ref1, results;\n            results = [];\n            for (i = o = 0, ref1 = xss.length; 0 <= ref1 ? o < ref1 : o > ref1; i = 0 <= ref1 ? ++o : --o) {\n              results.push(0);\n            }\n            return results;\n          })();\n          return Iterator(function() {\n            var r;\n            if (v[0] < limits[0]) {\n              r = get_value(v);\n              inc(v);\n              return r;\n            } else {\n              return nil;\n            }\n          });\n        });\n      };\n    })();\n    list = function(xs) {\n      var it, n, results, results1, x;\n      if (xs instanceof Array) {\n        return xs;\n      } else if (typeof xs === 'function') {\n        it = xs[Symbol.iterator]();\n        results = [];\n        while ((x = it()) !== nil) {\n          results.push(x);\n        }\n        return results;\n      } else if (xs[Symbol.iterator] != null) {\n        it = lazy(xs)[Symbol.iterator]();\n        results1 = [];\n        while ((x = it()) !== nil) {\n          results1.push(x);\n        }\n        return results1;\n      } else if (typeof xs === 'number') {\n        n = xs;\n        return function(xs) {\n          return list(take(n)(xs));\n        };\n      } else {\n        throw ListError('list(xs): xs is neither Array nor Iterable');\n      }\n    };\n    head = function(xs) {\n      var iter, r, ref1;\n      if ((ref1 = xs.constructor) === Array || ref1 === String) {\n        if (xs.length > 0) {\n          return xs[0];\n        } else {\n          throw ListError(\"head() used on empty list.\");\n        }\n      } else {\n        iter = lazy(xs)[Symbol.iterator]();\n        if ((r = iter()) !== nil) {\n          return r;\n        } else {\n          throw ListError(\"head() used on empty list.\");\n        }\n      }\n    };\n    tail = drop(1);\n    last = function(xs) {\n      var iter, r, ref1, x;\n      if ((ref1 = xs.constructor) === Array || ref1 === String) {\n        if (xs.length > 0) {\n          return xs[xs.length - 1];\n        } else {\n          throw ListError(\"last() used on empty list.\");\n        }\n      } else {\n        iter = lazy(xs)[Symbol.iterator]();\n        r = nil;\n        while ((x = iter()) !== nil) {\n          r = x;\n        }\n        if (r !== nil) {\n          return r;\n        } else {\n          throw ListError(\"last() used on empty list.\");\n        }\n      }\n    };\n    length = function(xs) {\n      var iter, r, ref1, x;\n      if ((ref1 = xs.constructor) === Array || ref1 === String) {\n        return xs.length;\n      } else {\n        iter = lazy(xs)[Symbol.iterator]();\n        r = 0;\n        while ((x = iter()) !== nil) {\n          ++r;\n        }\n        return r;\n      }\n    };\n    foldl = function(op) {\n      return function(init) {\n        return function(xs) {\n          var iter, r, x;\n          r = init;\n          iter = lazy(xs)[Symbol.iterator]();\n          while ((x = iter()) !== nil) {\n            r = op(r)(x);\n          }\n          return r;\n        };\n      };\n    };\n    best = function(better) {\n      return function(xs) {\n        var it, iter, r;\n        iter = lazy(xs)[Symbol.iterator]();\n        if ((r = iter()) === nil) {\n          return null;\n        }\n        while ((it = iter()) !== nil) {\n          r = better(it, r) ? it : r;\n        }\n        return r;\n      };\n    };\n    maximumOn = function(f) {\n      return best(function(a, b) {\n        return f(a) > f(b);\n      });\n    };\n    minimumOn = function(f) {\n      return best(function(a, b) {\n        return f(a) < f(b);\n      });\n    };\n    maximum = best(function(x, y) {\n      return x > y;\n    });\n    minimum = best(function(x, y) {\n      return x < y;\n    });\n    all = function(f) {\n      if (typeof f !== 'function') {\n        f = (function(x) {\n          return x === f;\n        });\n      }\n      return function(xs) {\n        var iter, x;\n        iter = lazy(xs)[Symbol.iterator]();\n        while ((x = iter()) !== nil) {\n          if (!f(x)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    };\n    any = function(f) {\n      var all_not;\n      all_not = all(function(x) {\n        return !f(x);\n      });\n      return function(xs) {\n        return !(all_not(xs));\n      };\n    };\n    fromList = function(pairs) {\n      var r;\n      r = {};\n      foreach(pairs, function(arg1) {\n        var k, v;\n        k = arg1[0], v = arg1[1];\n        if (v !== void 0) {\n          return r[k] = v;\n        }\n      });\n      return r;\n    };\n    brk = function() {\n      return brk;\n    };\n    brk.toString = function() {\n      return 'foreach.break';\n    };\n    foreach = function(xs, callback, fruit) {\n      var iter, x;\n      iter = lazy(xs)[Symbol.iterator]();\n      while ((x = iter()) !== nil) {\n        if (callback(x, fruit) === brk) {\n          break;\n        }\n      }\n      return fruit;\n    };\n    Object.defineProperties(foreach, {\n      \"break\": {\n        writable: false,\n        configurable: false,\n        enumerable: false,\n        value: brk\n      }\n    });\n    return {\n      nil: nil,\n      LazyList: LazyList,\n      Iterator: Iterator,\n      Symbol: Symbol,\n      naturals: naturals,\n      range: range,\n      primes: primes,\n      lazy: lazy,\n      enumerate: enumerate,\n      repeat: repeat,\n      iterate: iterate,\n      randoms: randoms,\n      permutations: permutations,\n      superset: superset,\n      cons: cons,\n      map: map,\n      filter: filter,\n      take: take,\n      takeWhile: takeWhile,\n      tail: tail,\n      drop: drop,\n      dropWhile: dropWhile,\n      scanl: scanl,\n      streak: streak,\n      streak2: streak2,\n      reverse: reverse,\n      sort: sort,\n      sortOn: sortOn,\n      groupOn: groupOn,\n      partition: partition,\n      concat: concat,\n      zip: zip,\n      zipWith: zipWith,\n      cartProd: cartProd,\n      list: list,\n      head: head,\n      last: last,\n      length: length,\n      foldl: foldl,\n      best: best,\n      maximum: maximum,\n      minimum: minimum,\n      maximumOn: maximumOn,\n      minimumOn: minimumOn,\n      all: all,\n      any: any,\n      fromList: fromList,\n      foreach: foreach\n    };\n  };\n\n  module.exports = this_module({\n    Symbol: typeof Symbol !== \"undefined\" && Symbol !== null ? Symbol : {\n      iterator: 'iter'\n    }\n  });\n\n}).call(this);\n\n//# sourceMappingURL=lazy.js.map\n","var this_module,\n  slice = [].slice;\n\nthis_module = function(arg) {\n  var abs, ceil, combine, curry2, curry3, equal, flip, floor, foldl, format, greaterEqual, greaterThan, identity, lessEqual, lessThan, minus, notEqual, pack, pluck, plus, precise, seek, sum, uncurry2, uncurry3, unpack;\n  foldl = arg.foldl;\n  identity = function(x) {\n    return x;\n  };\n  format = function(form) {\n    return function(env) {\n      return form.replace(/\\{(\\w+)\\}/g, function(s, k) {\n        var ref;\n        return (ref = env[k]) != null ? ref : s;\n      });\n    };\n  };\n  flip = function(f) {\n    return function(x) {\n      return function(y) {\n        return f(y)(x);\n      };\n    };\n  };\n  combine = function(f) {\n    return function(g) {\n      return function(x) {\n        return f(g(x));\n      };\n    };\n  };\n  curry2 = function(f) {\n    return function(a) {\n      return function(b) {\n        return f(a, b);\n      };\n    };\n  };\n  curry3 = function(f) {\n    return function(a) {\n      return function(b) {\n        return function(c) {\n          return f(a, b, c);\n        };\n      };\n    };\n  };\n  uncurry2 = function(f) {\n    return function(a, b) {\n      return f(a)(b);\n    };\n  };\n  uncurry3 = function(f) {\n    return function(a, b, c) {\n      return f(a)(b)(c);\n    };\n  };\n  pack = function(f) {\n    return function(arr) {\n      return f.apply(null, arr);\n    };\n  };\n  unpack = function(f) {\n    return function() {\n      var arr;\n      arr = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return f(arr);\n    };\n  };\n  seek = function(arr) {\n    return function(i) {\n      return arr[i];\n    };\n  };\n  pluck = function(attr) {\n    return function(d) {\n      return d[attr];\n    };\n  };\n  equal = function(it) {\n    return function(x) {\n      return x === it;\n    };\n  };\n  notEqual = function(it) {\n    return function(x) {\n      return x !== it;\n    };\n  };\n  lessThan = function(it) {\n    return function(x) {\n      return x < it;\n    };\n  };\n  greaterThan = function(it) {\n    return function(x) {\n      return x > it;\n    };\n  };\n  lessEqual = function(it) {\n    return function(x) {\n      return x <= it;\n    };\n  };\n  greaterEqual = function(it) {\n    return function(x) {\n      return x >= it;\n    };\n  };\n  plus = function(x) {\n    return function(y) {\n      return x + y;\n    };\n  };\n  minus = function(x) {\n    return function(y) {\n      return x - y;\n    };\n  };\n  abs = Math.abs;\n  floor = Math.floor;\n  ceil = Math.ceil;\n  precise = function(n) {\n    return function(x) {\n      return parseFloat(x.toPrecision(n));\n    };\n  };\n  sum = foldl(plus)(0);\n  return {\n    identity: identity,\n    format: format,\n    flip: flip,\n    combine: combine,\n    curry2: curry2,\n    curry3: curry3,\n    uncurry2: uncurry2,\n    uncurry3: uncurry3,\n    pack: pack,\n    unpack: unpack,\n    seek: seek,\n    pluck: pluck,\n    equal: equal,\n    notEqual: notEqual,\n    lessThan: lessThan,\n    lessEqual: lessEqual,\n    greaterThan: greaterThan,\n    greaterEqual: greaterEqual,\n    plus: plus,\n    minus: minus,\n    abs: abs,\n    floor: floor,\n    ceil: ceil,\n    precise: precise,\n    sum: sum\n  };\n};\n\nmodule.exports = this_module({\n  foldl: require('lazy-list').foldl\n});\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcYmFzaWNzLmNvZmZlZSIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTHVvXFxHaXRodWJcXGNvZmZlZS1tYXRlXFxzcmNcXGJhc2ljcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxXQUFBO0VBQUE7O0FBQUEsV0FBQSxHQUFjLFNBQUMsR0FBRDtBQUNiLE1BQUE7RUFEZSxRQUFEO0VBQ2QsUUFBQSxHQUFXLFNBQUMsQ0FBRDtXQUFPO0VBQVA7RUFFWCxNQUFBLEdBQVMsU0FBQyxJQUFEO1dBQVUsU0FBQyxHQUFEO2FBQ2xCLElBQUksQ0FBQyxPQUFMLENBQWEsWUFBYixFQUEyQixTQUFDLENBQUQsRUFBSSxDQUFKO0FBQVUsWUFBQTs4Q0FBUztNQUFuQixDQUEzQjtJQURrQjtFQUFWO0VBSVQsSUFBQSxHQUFPLFNBQUMsQ0FBRDtXQUNOLFNBQUMsQ0FBRDthQUFPLFNBQUMsQ0FBRDtlQUFPLENBQUEsQ0FBRSxDQUFGLENBQUEsQ0FBSyxDQUFMO01BQVA7SUFBUDtFQURNO0VBR1AsT0FBQSxHQUFVLFNBQUMsQ0FBRDtXQUFPLFNBQUMsQ0FBRDthQUNoQixTQUFDLENBQUQ7ZUFBTyxDQUFBLENBQUUsQ0FBQSxDQUFFLENBQUYsQ0FBRjtNQUFQO0lBRGdCO0VBQVA7RUFHVixNQUFBLEdBQVMsU0FBQyxDQUFEO1dBQ1IsU0FBQyxDQUFEO2FBQU8sU0FBQyxDQUFEO2VBQU8sQ0FBQSxDQUFFLENBQUYsRUFBSyxDQUFMO01BQVA7SUFBUDtFQURRO0VBR1QsTUFBQSxHQUFTLFNBQUMsQ0FBRDtXQUNSLFNBQUMsQ0FBRDthQUFPLFNBQUMsQ0FBRDtlQUFPLFNBQUMsQ0FBRDtpQkFBTyxDQUFBLENBQUUsQ0FBRixFQUFLLENBQUwsRUFBUSxDQUFSO1FBQVA7TUFBUDtJQUFQO0VBRFE7RUFHVCxRQUFBLEdBQVcsU0FBQyxDQUFEO1dBQ1YsU0FBQyxDQUFELEVBQUksQ0FBSjthQUFVLENBQUEsQ0FBRSxDQUFGLENBQUEsQ0FBSyxDQUFMO0lBQVY7RUFEVTtFQUdYLFFBQUEsR0FBVyxTQUFDLENBQUQ7V0FDVixTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUDthQUFhLENBQUEsQ0FBRSxDQUFGLENBQUEsQ0FBSyxDQUFMLENBQUEsQ0FBUSxDQUFSO0lBQWI7RUFEVTtFQUdYLElBQUEsR0FBTyxTQUFDLENBQUQ7V0FDTixTQUFDLEdBQUQ7YUFBUyxDQUFBLGFBQUUsR0FBRjtJQUFUO0VBRE07RUFHUCxNQUFBLEdBQVMsU0FBQyxDQUFEO1dBQ1IsU0FBQTtBQUFZLFVBQUE7TUFBWDthQUFXLENBQUEsQ0FBRSxHQUFGO0lBQVo7RUFEUTtFQUlULElBQUEsR0FBTyxTQUFDLEdBQUQ7V0FDTixTQUFDLENBQUQ7YUFBTyxHQUFJLENBQUEsQ0FBQTtJQUFYO0VBRE07RUFHUCxLQUFBLEdBQVEsU0FBQyxJQUFEO1dBQ1AsU0FBQyxDQUFEO2FBQU8sQ0FBRSxDQUFBLElBQUE7SUFBVDtFQURPO0VBSVIsS0FBQSxHQUFRLFNBQUMsRUFBRDtXQUNQLFNBQUMsQ0FBRDthQUFPLENBQUEsS0FBSztJQUFaO0VBRE87RUFHUixRQUFBLEdBQVcsU0FBQyxFQUFEO1dBQ1YsU0FBQyxDQUFEO2FBQU8sQ0FBQSxLQUFLO0lBQVo7RUFEVTtFQUdYLFFBQUEsR0FBVyxTQUFDLEVBQUQ7V0FDVixTQUFDLENBQUQ7YUFBTyxDQUFBLEdBQUk7SUFBWDtFQURVO0VBR1gsV0FBQSxHQUFjLFNBQUMsRUFBRDtXQUNiLFNBQUMsQ0FBRDthQUFPLENBQUEsR0FBSTtJQUFYO0VBRGE7RUFHZCxTQUFBLEdBQVksU0FBQyxFQUFEO1dBQ1gsU0FBQyxDQUFEO2FBQU8sQ0FBQSxJQUFLO0lBQVo7RUFEVztFQUdaLFlBQUEsR0FBZSxTQUFDLEVBQUQ7V0FDZCxTQUFDLENBQUQ7YUFBTyxDQUFBLElBQUs7SUFBWjtFQURjO0VBSWYsSUFBQSxHQUFPLFNBQUMsQ0FBRDtXQUFPLFNBQUMsQ0FBRDthQUFPLENBQUEsR0FBSTtJQUFYO0VBQVA7RUFDUCxLQUFBLEdBQVEsU0FBQyxDQUFEO1dBQU8sU0FBQyxDQUFEO2FBQU8sQ0FBQSxHQUFJO0lBQVg7RUFBUDtFQUVSLEdBQUEsR0FBTSxJQUFJLENBQUM7RUFDWCxLQUFBLEdBQVEsSUFBSSxDQUFDO0VBQ2IsSUFBQSxHQUFPLElBQUksQ0FBQztFQUVaLE9BQUEsR0FBVSxTQUFDLENBQUQ7V0FDVCxTQUFDLENBQUQ7YUFBTyxVQUFBLENBQVcsQ0FBQyxDQUFDLFdBQUYsQ0FBYyxDQUFkLENBQVg7SUFBUDtFQURTO0VBR1YsR0FBQSxHQUFNLEtBQUEsQ0FBTSxJQUFOLENBQUEsQ0FBWSxDQUFaO0FBRU4sU0FBTztJQUNOLFVBQUEsUUFETTtJQUNJLFFBQUEsTUFESjtJQUVOLE1BQUEsSUFGTTtJQUVBLFNBQUEsT0FGQTtJQUdOLFFBQUEsTUFITTtJQUdFLFFBQUEsTUFIRjtJQUdVLFVBQUEsUUFIVjtJQUdvQixVQUFBLFFBSHBCO0lBRzhCLE1BQUEsSUFIOUI7SUFHb0MsUUFBQSxNQUhwQztJQUlOLE1BQUEsSUFKTTtJQUlBLE9BQUEsS0FKQTtJQUtOLE9BQUEsS0FMTTtJQUtDLFVBQUEsUUFMRDtJQUtXLFVBQUEsUUFMWDtJQUtxQixXQUFBLFNBTHJCO0lBS2dDLGFBQUEsV0FMaEM7SUFLNkMsY0FBQSxZQUw3QztJQU1OLE1BQUEsSUFOTTtJQU1BLE9BQUEsS0FOQTtJQU1PLEtBQUEsR0FOUDtJQU1ZLE9BQUEsS0FOWjtJQU1tQixNQUFBLElBTm5CO0lBTXlCLFNBQUEsT0FOekI7SUFPTixLQUFBLEdBUE07O0FBdEVNOztBQWdGZCxNQUFNLENBQUMsT0FBUCxHQUFpQixXQUFBLENBQ2hCO0VBQUEsS0FBQSxFQUFPLE9BQUEsQ0FBUSxXQUFSLENBQW9CLENBQUMsS0FBNUI7Q0FEZ0IifQ==\n","var basics, convertors, funny, lazy, url_helpers, utils;\n\nutils = require('./utils');\n\nbasics = require('./basics');\n\nlazy = require('lazy-list');\n\nfunny = require('./funny');\n\nconvertors = require('./convertors');\n\nurl_helpers = require('./url-helpers');\n\nmodule.exports = utils.extend({})(utils, basics, lazy, funny, convertors, url_helpers);\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcY29mZmVlLW1hdGUuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcY29mZmVlLW1hdGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxTQUFSOztBQUNSLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxJQUFBLEdBQU8sT0FBQSxDQUFRLFdBQVI7O0FBQ1AsS0FBQSxHQUFRLE9BQUEsQ0FBUSxTQUFSOztBQUNSLFVBQUEsR0FBYSxPQUFBLENBQVEsY0FBUjs7QUFDYixXQUFBLEdBQWMsT0FBQSxDQUFRLGVBQVI7O0FBRWQsTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FBSyxDQUFDLE1BQU4sQ0FBYSxFQUFiLENBQUEsQ0FBaUIsS0FBakIsRUFBd0IsTUFBeEIsRUFBZ0MsSUFBaEMsRUFBc0MsS0FBdEMsRUFBNkMsVUFBN0MsRUFBeUQsV0FBekQifQ==\n","var this_module;\n\nthis_module = function() {\n  var bool, chr, flatJson, float, hex, int, json, jsonWith, obj, ord, prettyJson, str;\n  int = function(s, base) {\n    var r;\n    if (typeof s === 'string') {\n      r = parseInt(s, base);\n      if (!((s.slice != null) && r === parseInt(s.slice(0, -1), base))) {\n        return r;\n      } else {\n        return null;\n      }\n    } else {\n      return parseInt(0 + s);\n    }\n  };\n  float = function(s) {\n    if (/^-?[0-9]*(\\.[0-9]+)?([eE]-?[0-9]+)?$/.test(s)) {\n      return parseFloat(s);\n    } else {\n      return null;\n    }\n  };\n  str = function(x, base) {\n    return x.toString(base);\n  };\n  bool = function(x) {\n    if (x === true || x === false) {\n      return x;\n    } else {\n      return null;\n    }\n  };\n  hex = function(x) {\n    return x.toString(16);\n  };\n  ord = function(c) {\n    return c.charCodeAt();\n  };\n  chr = function(x) {\n    return String.fromCharCode(x);\n  };\n  json = function(it) {\n    return JSON.stringify(it);\n  };\n  jsonWith = function(indent, convertor) {\n    return function(it) {\n      return JSON.stringify(it, convertor, indent);\n    };\n  };\n  prettyJson = function(it) {\n    return JSON.stringify(it, null, 4);\n  };\n  flatJson = (function() {\n    var flat;\n    flat = function(k, v) {\n      if (typeof v === 'string') {\n        try {\n          return JSON.parse(v);\n        } catch (error) {\n          return v;\n        }\n      } else {\n        return v;\n      }\n    };\n    return function(it) {\n      return JSON.stringify(it, flat, 4);\n    };\n  })();\n  obj = function(s) {\n    return JSON.parse(s);\n  };\n  return {\n    int: int,\n    float: float,\n    bool: bool,\n    str: str,\n    hex: hex,\n    ord: ord,\n    chr: chr,\n    json: json,\n    jsonWith: jsonWith,\n    prettyJson: prettyJson,\n    flatJson: flatJson,\n    obj: obj\n  };\n};\n\nmodule.exports = this_module();\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcY29udmVydG9ycy5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEx1b1xcR2l0aHViXFxjb2ZmZWUtbWF0ZVxcc3JjXFxjb252ZXJ0b3JzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLFdBQUEsR0FBYyxTQUFBO0FBQ2IsTUFBQTtFQUFBLEdBQUEsR0FBTSxTQUFDLENBQUQsRUFBSSxJQUFKO0FBQWEsUUFBQTtJQUFBLElBQUcsT0FBTyxDQUFQLEtBQWEsUUFBaEI7TUFBK0IsQ0FBQSxHQUFJLFFBQUEsQ0FBUyxDQUFULEVBQVksSUFBWjtNQUFtQixJQUFBLENBQUEsQ0FBTyxpQkFBQSxJQUFhLENBQUEsS0FBSyxRQUFBLENBQVMsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLEVBQVUsQ0FBQyxDQUFYLENBQVQsRUFBd0IsSUFBeEIsQ0FBekIsQ0FBQTtlQUE0RCxFQUE1RDtPQUFBLE1BQUE7ZUFBbUUsS0FBbkU7T0FBdEQ7S0FBQSxNQUFBO2FBQW9JLFFBQUEsQ0FBUyxDQUFBLEdBQUksQ0FBYixFQUFwSTs7RUFBYjtFQUNOLEtBQUEsR0FBUSxTQUFDLENBQUQ7SUFBTyxJQUFHLHNDQUFzQyxDQUFDLElBQXZDLENBQTRDLENBQTVDLENBQUg7YUFBdUQsVUFBQSxDQUFXLENBQVgsRUFBdkQ7S0FBQSxNQUFBO2FBQTBFLEtBQTFFOztFQUFQO0VBQ1IsR0FBQSxHQUFNLFNBQUMsQ0FBRCxFQUFJLElBQUo7V0FBYSxDQUFDLENBQUMsUUFBRixDQUFXLElBQVg7RUFBYjtFQUNOLElBQUEsR0FBTyxTQUFDLENBQUQ7SUFBTyxJQUFHLENBQUEsS0FBTSxJQUFOLElBQUEsQ0FBQSxLQUFZLEtBQWY7YUFBMkIsRUFBM0I7S0FBQSxNQUFBO2FBQWtDLEtBQWxDOztFQUFQO0VBQ1AsR0FBQSxHQUFNLFNBQUMsQ0FBRDtXQUFPLENBQUMsQ0FBQyxRQUFGLENBQVcsRUFBWDtFQUFQO0VBQ04sR0FBQSxHQUFNLFNBQUMsQ0FBRDtXQUFPLENBQUMsQ0FBQyxVQUFGLENBQUE7RUFBUDtFQUNOLEdBQUEsR0FBTSxTQUFDLENBQUQ7V0FBTyxNQUFNLENBQUMsWUFBUCxDQUFvQixDQUFwQjtFQUFQO0VBQ04sSUFBQSxHQUFPLFNBQUMsRUFBRDtXQUFRLElBQUksQ0FBQyxTQUFMLENBQWUsRUFBZjtFQUFSO0VBQ1AsUUFBQSxHQUFXLFNBQUMsTUFBRCxFQUFTLFNBQVQ7V0FBdUIsU0FBQyxFQUFEO2FBQVEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxFQUFmLEVBQW1CLFNBQW5CLEVBQThCLE1BQTlCO0lBQVI7RUFBdkI7RUFDWCxVQUFBLEdBQWEsU0FBQyxFQUFEO1dBQVEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxFQUFmLEVBQW1CLElBQW5CLEVBQXlCLENBQXpCO0VBQVI7RUFDYixRQUFBLEdBQWMsQ0FBQSxTQUFBO0FBQ2IsUUFBQTtJQUFBLElBQUEsR0FBTyxTQUFDLENBQUQsRUFBSSxDQUFKO01BQVUsSUFBRyxPQUFPLENBQVAsS0FBWSxRQUFmO0FBQThCO2lCQUFJLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxFQUFKO1NBQUEsYUFBQTtpQkFBNkIsRUFBN0I7U0FBOUI7T0FBQSxNQUFBO2VBQW1FLEVBQW5FOztJQUFWO1dBQ1AsU0FBQyxFQUFEO2FBQVEsSUFBSSxDQUFDLFNBQUwsQ0FBZSxFQUFmLEVBQW1CLElBQW5CLEVBQXlCLENBQXpCO0lBQVI7RUFGYSxDQUFBLENBQUgsQ0FBQTtFQUdYLEdBQUEsR0FBTSxTQUFDLENBQUQ7V0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVg7RUFBUDtBQUVOLFNBQU87SUFDTixLQUFBLEdBRE07SUFDRCxPQUFBLEtBREM7SUFDTSxNQUFBLElBRE47SUFDWSxLQUFBLEdBRFo7SUFDaUIsS0FBQSxHQURqQjtJQUNzQixLQUFBLEdBRHRCO0lBQzJCLEtBQUEsR0FEM0I7SUFDZ0MsTUFBQSxJQURoQztJQUNzQyxVQUFBLFFBRHRDO0lBQ2dELFlBQUEsVUFEaEQ7SUFDNEQsVUFBQSxRQUQ1RDtJQUNzRSxLQUFBLEdBRHRFOztBQWhCTTs7QUFvQmQsTUFBTSxDQUFDLE9BQVAsR0FBaUIsV0FBQSxDQUFBIn0=\n","var this_module,\n  slice = [].slice;\n\nthis_module = function() {\n  var Y, church, fix, memoFix, memoize;\n  church = function(n) {\n    var iter;\n    iter = function(f, n, r) {\n      if (n === 0) {\n        return r;\n      } else {\n        return iter(f, n - 1, f(r));\n      }\n    };\n    return function(f) {\n      return function(x) {\n        return iter(f, n + 0, x);\n      };\n    };\n  };\n  Y = function(f) {\n    return (function(x) {\n      return x(x);\n    })((function(x) {\n      return f((function(y) {\n        return (x(x))(y);\n      }));\n    }));\n  };\n  memoize = function(f, get_key) {\n    var cache;\n    if (get_key == null) {\n      get_key = (function() {\n        var args;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return json(args);\n      });\n    }\n    cache = {};\n    return function() {\n      var args, cached, key, r;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      key = get_key.apply(null, args);\n      cached = cache[key];\n      if (cached != null) {\n        return cached;\n      } else {\n        r = f.apply(null, args);\n        cache[key] = r;\n        return r;\n      }\n    };\n  };\n  fix = Y;\n  memoFix = function(ff) {\n    var f;\n    f = memoize(ff((function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return f.apply(null, args);\n    })));\n    return f;\n  };\n  return {\n    church: church,\n    Y: Y,\n    memoize: memoize,\n    fix: fix,\n    memoFix: memoFix\n  };\n};\n\nmodule.exports = this_module();\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcZnVubnkuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcZnVubnkuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsV0FBQTtFQUFBOztBQUFBLFdBQUEsR0FBYyxTQUFBO0FBQ2IsTUFBQTtFQUFBLE1BQUEsR0FBUyxTQUFDLENBQUQ7QUFDUixRQUFBO0lBQUEsSUFBQSxHQUFPLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQO01BQ04sSUFBRyxDQUFBLEtBQUssQ0FBUjtlQUFlLEVBQWY7T0FBQSxNQUFBO2VBQXNCLElBQUEsQ0FBSyxDQUFMLEVBQVEsQ0FBQSxHQUFJLENBQVosRUFBZSxDQUFBLENBQUUsQ0FBRixDQUFmLEVBQXRCOztJQURNO1dBRVAsU0FBQyxDQUFEO2FBQ0MsU0FBQyxDQUFEO2VBQU8sSUFBQSxDQUFLLENBQUwsRUFBUSxDQUFBLEdBQUksQ0FBWixFQUFlLENBQWY7TUFBUDtJQUREO0VBSFE7RUFNVCxDQUFBLEdBQUksU0FBQyxDQUFEO1dBQ0gsQ0FBQyxTQUFDLENBQUQ7YUFBUSxDQUFBLENBQUUsQ0FBRjtJQUFSLENBQUQsQ0FBQSxDQUFlLENBQUMsU0FBQyxDQUFEO2FBQVEsQ0FBQSxDQUFFLENBQUMsU0FBQyxDQUFEO2VBQVEsQ0FBQyxDQUFBLENBQUUsQ0FBRixDQUFELENBQUEsQ0FBTSxDQUFOO01BQVIsQ0FBRCxDQUFGO0lBQVIsQ0FBRCxDQUFmO0VBREc7RUFHSixPQUFBLEdBQVUsU0FBQyxDQUFELEVBQUksT0FBSjtBQUNULFFBQUE7O01BRGEsVUFBVSxDQUFDLFNBQUE7QUFBYSxZQUFBO1FBQVo7ZUFBWSxJQUFBLENBQUssSUFBTDtNQUFiLENBQUQ7O0lBQ3ZCLEtBQUEsR0FBUTtXQUNSLFNBQUE7QUFDQyxVQUFBO01BREE7TUFDQSxHQUFBLEdBQU0sT0FBQSxhQUFRLElBQVI7TUFDTixNQUFBLEdBQVMsS0FBTSxDQUFBLEdBQUE7TUFDZixJQUFHLGNBQUg7ZUFDQyxPQUREO09BQUEsTUFBQTtRQUdDLENBQUEsR0FBSSxDQUFBLGFBQUUsSUFBRjtRQUNKLEtBQU0sQ0FBQSxHQUFBLENBQU4sR0FBYTtlQUNiLEVBTEQ7O0lBSEQ7RUFGUztFQVlWLEdBQUEsR0FBTTtFQUVOLE9BQUEsR0FBVSxTQUFDLEVBQUQ7QUFDVCxRQUFBO0lBQUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUyxFQUFBLENBQUcsQ0FBQyxTQUFBO0FBQWEsVUFBQTtNQUFaO2FBQVksQ0FBQSxhQUFFLElBQUY7SUFBYixDQUFELENBQUgsQ0FBVDtBQUNKLFdBQU87RUFGRTtBQUlWLFNBQU87SUFDTixRQUFBLE1BRE07SUFDRSxHQUFBLENBREY7SUFDSyxTQUFBLE9BREw7SUFDYyxLQUFBLEdBRGQ7SUFDbUIsU0FBQSxPQURuQjs7QUE1Qk07O0FBZ0NkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFdBQUEsQ0FBQSJ9\n","var this_module;\n\nthis_module = function() {\n  var uri_decoder, uri_encoder;\n  uri_encoder = function(component_packer) {\n    if (component_packer == null) {\n      component_packer = str;\n    }\n    return function(obj) {\n      var k, v;\n      return ((function() {\n        var results;\n        results = [];\n        for (k in obj) {\n          v = obj[k];\n          if (v !== void 0) {\n            results.push((encodeURIComponent(k)) + \"=\" + (encodeURIComponent(component_packer(v))));\n          }\n        }\n        return results;\n      })()).join('&');\n    };\n  };\n  uri_decoder = function(component_unpacker) {\n    if (component_unpacker == null) {\n      component_unpacker = (function(s) {\n        return s;\n      });\n    }\n    return function(str) {\n      var d, i, j, k, len, ref, ref1, ref2, s, v;\n      d = {};\n      ref1 = (ref = str.match(/[^?=&]+=[^&]*/g)) != null ? ref : [];\n      for (i = 0, len = ref1.length; i < len; i++) {\n        s = ref1[i];\n        ref2 = s.match(/([^=]+)=(.*)/), j = ref2.length - 2, k = ref2[j++], v = ref2[j++];\n        d[decodeURIComponent(k)] = component_unpacker(decodeURIComponent(v));\n      }\n      return d;\n    };\n  };\n  return {\n    uri_encoder: uri_encoder,\n    uri_decoder: uri_decoder\n  };\n};\n\nmodule.exports = this_module();\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcdXJsLWhlbHBlcnMuY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxMdW9cXEdpdGh1YlxcY29mZmVlLW1hdGVcXHNyY1xcdXJsLWhlbHBlcnMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsV0FBQSxHQUFjLFNBQUE7QUFDYixNQUFBO0VBQUEsV0FBQSxHQUFjLFNBQUMsZ0JBQUQ7O01BQUMsbUJBQW1COztXQUNqQyxTQUFDLEdBQUQ7QUFDQyxVQUFBO2FBQUE7O0FBQUM7YUFBQSxRQUFBOztjQUF5RixDQUFBLEtBQU87eUJBQTlGLENBQUMsa0JBQUEsQ0FBbUIsQ0FBbkIsQ0FBRCxDQUFBLEdBQXVCLEdBQXZCLEdBQXlCLENBQUMsa0JBQUEsQ0FBbUIsZ0JBQUEsQ0FBaUIsQ0FBakIsQ0FBbkIsQ0FBRDs7QUFBM0I7O1VBQUQsQ0FBMkcsQ0FBQyxJQUE1RyxDQUFpSCxHQUFqSDtJQUREO0VBRGE7RUFJZCxXQUFBLEdBQWMsU0FBQyxrQkFBRDs7TUFBQyxxQkFBcUIsQ0FBQyxTQUFDLENBQUQ7ZUFBTztNQUFQLENBQUQ7O1dBQ25DLFNBQUMsR0FBRDtBQUNDLFVBQUE7TUFBQSxDQUFBLEdBQUk7QUFDSjtBQUFBLFdBQUEsc0NBQUE7O1FBQ0MsT0FBYyxDQUFDLENBQUMsS0FBRixDQUFRLGNBQVIsQ0FBZCxxQkFBQSxFQUFNLGFBQU4sRUFBUztRQUNULENBQUUsQ0FBQSxrQkFBQSxDQUFtQixDQUFuQixDQUFBLENBQUYsR0FBNEIsa0JBQUEsQ0FBbUIsa0JBQUEsQ0FBbUIsQ0FBbkIsQ0FBbkI7QUFGN0I7QUFHQSxhQUFPO0lBTFI7RUFEYTtBQVFkLFNBQU87SUFDTixhQUFBLFdBRE07SUFDTyxhQUFBLFdBRFA7O0FBYk07O0FBaUJkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFdBQUEsQ0FBQSJ9\n","var this_module,\n  slice = [].slice;\n\nthis_module = function() {\n  var assert, assertEq, assertEqOn, copy, deepcopy, dict, extend, literal, log, overload, purify, ref, simpl, time_now, update;\n  simpl = function(lit) {\n    lit = lit.replace(/^\\s*\\(\\s*function\\s*\\(\\s*\\)\\s*{\\s*return\\s*([^]*?);?\\s*}\\s*\\)\\s*\\(\\s*\\)\\s*$/, '$1');\n    lit = lit.replace(/^\\s*\\(\\s*\\(\\s*\\)\\s*=>\\s*{\\s*return\\s*([^]*?);?\\s*}\\s*\\)\\s*\\(\\s*\\)\\s*$/, '$1');\n    lit = lit.replace(/^\\s*\\(\\s*\\(\\s*\\)\\s*=>\\s*([^]*?)\\s*\\)\\s*\\(\\s*\\)\\s*$/, '$1');\n    return lit;\n  };\n  literal = function(thunk) {\n    var r, s0, s1, s2;\n    s0 = \"(\" + (thunk.toString()) + \")()\";\n    s1 = simpl(s0);\n    while (s1 !== s0) {\n      s0 = s1;\n      s1 = simpl(s1);\n    }\n    s2 = s0.replace(/[\\r\\n]{1,2}\\s*/g, '');\n    r = s2.length <= 60 ? s2 : s0;\n    return r;\n  };\n  time_now = function() {\n    return (new Date).getTime();\n  };\n  log = (function() {\n    var dye, factory, got, histories, log_label;\n    dye = (function() {\n      var cavailable, palette;\n      cavailable = (typeof window === \"undefined\" || window === null) && (typeof process !== \"undefined\" && process !== null) && !process.env.NODE_DISABLE_COLORS;\n      palette = {\n        bold: '\\x1B[0;1m',\n        red: '\\x1B[0;31m',\n        green: '\\x1B[0;32m',\n        yellow: '\\x1B[0;33m',\n        blue: '\\x1B[0;34m',\n        bold_grey: '\\x1B[1;30m'\n      };\n      if (!cavailable) {\n        return function(color) {\n          return function(s) {\n            return s;\n          };\n        };\n      } else {\n        return function(color) {\n          return function(s) {\n            return \"\" + palette[color] + s + '\\x1B[0m';\n          };\n        };\n      }\n    })();\n    log_label = (function() {\n      var flag_palette, op_flag;\n      flag_palette = {\n        '#': 'bold_grey',\n        'I': 'green',\n        'E': 'red',\n        'W': 'yellow'\n      };\n      op_flag = function(op) {\n        if (op === 'log') {\n          return '#';\n        } else {\n          return op[0].toUpperCase();\n        }\n      };\n      return function(op) {\n        var flag;\n        flag = op_flag(op);\n        return dye(flag_palette[flag])(flag);\n      };\n    })();\n    histories = [];\n    factory = function(op) {\n      var prefix;\n      prefix = \"\" + (dye('bold_grey')('#')) + (log_label(op));\n      return function() {\n        var args, ball, eval_result, expr, f, i, len, start_time, time_used;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        ball = [];\n        for (i = 0, len = args.length; i < len; i++) {\n          f = args[i];\n          if (typeof f === 'function') {\n            expr = literal(f);\n            start_time = time_now();\n            eval_result = f();\n            time_used = time_now() - start_time;\n            ball.push(prefix + \" \" + (dye('green')(expr)) + \" \" + (dye('bold_grey')('==>')), eval_result);\n            if (time_used > 0) {\n              ball.push(dye('yellow')(\"[\" + time_used + \"ms]\"));\n            }\n          } else {\n            ball.push(\"\" + prefix, f);\n          }\n        }\n        console[op].apply(console, ball);\n        histories.push(ball);\n        if (histories.length >= 10) {\n          histories.shift();\n        }\n        return null;\n      };\n    };\n    got = factory('log');\n    got.histories = histories;\n    got.info = factory('info');\n    got.warn = factory('warn');\n    got.error = got.err = factory('error');\n    return got;\n  })();\n  assert = function(f, msg) {\n    var e, r, ref;\n    if (!(f instanceof Function)) {\n      ref = [f, msg], msg = ref[0], f = ref[1];\n    }\n    try {\n      r = f();\n    } catch (error) {\n      e = error;\n      throw Error(\"Assertion Not Available: \" + (literal(f)) + \"\\n  Inner Error: \" + e);\n    }\n    if (!(r === true)) {\n      if ((msg != null) && msg instanceof Function) {\n        return msg(literal(f));\n      } else {\n        throw Error(\"Assertion Failed: \" + (msg != null ? msg : literal(f)));\n      }\n    }\n  };\n  assertEq = function(l, r, msg) {\n    var e, lv, ref, rv;\n    if (!(l instanceof Function)) {\n      ref = [l, r, msg], msg = ref[0], l = ref[1], r = ref[2];\n    }\n    try {\n      lv = l();\n      rv = r();\n    } catch (error) {\n      e = error;\n      throw Error(\"Equation Not Available: ( \" + (literal(l)) + \" ) == ( \" + (literal(r)) + \" )\\n  Inner Error: \" + e);\n    }\n    if (lv !== rv) {\n      if ((msg != null) && msg instanceof Function) {\n        return msg(literal(l), literal(r));\n      } else {\n        throw Error(\"Equation Does Not Hold:\\n  Left Expr  : \" + (literal(l)) + \"\\n  Right Expr : \" + (literal(r)) + \"\\n  Left Value : \" + lv + \"\\n  Right Value: \" + rv + \"\\n\");\n      }\n    }\n  };\n  assertEqOn = function(f) {\n    return function(l, r, msg) {\n      var e, flv, frv, lv, ref, rv;\n      if (!(l instanceof Function)) {\n        ref = [l, r, msg], msg = ref[0], l = ref[1], r = ref[2];\n      }\n      try {\n        lv = l();\n        rv = r();\n        flv = f(lv);\n        frv = f(rv);\n      } catch (error) {\n        e = error;\n        throw Error(\"Equation Not Available: ( \" + (literal(l)) + \" ) == ( \" + (literal(r)) + \" ) ON \" + f.name + \"\\n  Inner Error: \" + e);\n      }\n      if (flv !== frv) {\n        if ((msg != null) && msg instanceof Function) {\n          return msg(literal(l), literal(r), f.name);\n        } else {\n          throw Error(\"Equation Does Not Hold:\\n  Left Expr  : \" + (literal(l)) + \"\\n  Right Expr : \" + (literal(r)) + \"\\n  Compared On: \" + f.name + \"\\n  Left Value : \" + flv + \"\\n  Right Value: \" + frv + \"\\n\");\n        }\n      }\n    };\n  };\n  purify = function(f) {\n    return function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      args = deepcopy(args);\n      return f.apply(null, args);\n    };\n  };\n  dict = function(pairs) {\n    var d, i, k, len, ref, v;\n    d = {};\n    for (i = 0, len = pairs.length; i < len; i++) {\n      ref = pairs[i], k = ref[0], v = ref[1];\n      d[k] = v;\n    }\n    return d;\n  };\n  ref = (function() {\n    var cp;\n    cp = function(root, dep) {\n      var k, r, v;\n      if (dep === 0 || (root == null) || typeof root !== 'object') {\n        return root;\n      }\n      if (root instanceof Array) {\n        r = (function() {\n          var i, len, results;\n          results = [];\n          for (i = 0, len = root.length; i < len; i++) {\n            v = root[i];\n            results.push(cp(v, dep - 1));\n          }\n          return results;\n        })();\n      } else {\n        r = {};\n        for (k in root) {\n          v = root[k];\n          r[k] = cp(v, dep - 1);\n        }\n      }\n      return r;\n    };\n    return {\n      copy: function(obj, depth) {\n        if (depth == null) {\n          depth = 1;\n        }\n        return cp(obj, depth);\n      },\n      deepcopy: function(obj, depth) {\n        if (depth == null) {\n          depth = 2e308;\n        }\n        return cp(obj, depth);\n      }\n    };\n  })(), copy = ref.copy, deepcopy = ref.deepcopy;\n  extend = function(base) {\n    return function() {\n      var d, defaults, i, k, len, v;\n      defaults = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      for (i = 0, len = defaults.length; i < len; i++) {\n        d = defaults[i];\n        if (d != null) {\n          for (k in d) {\n            v = d[k];\n            if (base[k] == null) {\n              base[k] = v;\n            }\n          }\n        }\n      }\n      return base;\n    };\n  };\n  update = function(base) {\n    return function() {\n      var d, i, k, len, updates, v;\n      updates = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      for (i = 0, len = updates.length; i < len; i++) {\n        d = updates[i];\n        if (d != null) {\n          for (k in d) {\n            v = d[k];\n            base[k] = v;\n          }\n        }\n      }\n      return base;\n    };\n  };\n  overload = function(_d) {\n    var d, fallback;\n    d = copy(_d);\n    fallback = d['_'];\n    if (fallback != null) {\n      return function() {\n        var args, ref1;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        return ((ref1 = d[args.length]) != null ? ref1 : fallback).apply(null, args);\n      };\n    } else {\n      return function() {\n        var args, f;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        f = d[args.length];\n        if (f == null) {\n          throw Error(\"This Function Can't Accept \" + args.length + \" Args\");\n        } else {\n          return f.apply(null, args);\n        }\n      };\n    }\n  };\n  return {\n    log: log,\n    assert: assert,\n    assertEq: assertEq,\n    assertEqOn: assertEqOn,\n    dict: dict,\n    copy: copy,\n    deepcopy: deepcopy,\n    purify: purify,\n    extend: extend,\n    update: update,\n    overload: overload\n  };\n};\n\nmodule.exports = this_module();\n\n//# sourceMappingURL=data:application/json;base64,\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}