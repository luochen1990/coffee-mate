// Generated by CoffeeScript 1.8.0
(function() {
  var coffee_mate,
    __slice = [].slice;

  coffee_mate = (function() {
    var Y, abs, accept_multi_or_array, all, any, assert, best, bool, cart, ceil, chr, church, concat, copy, cube, deepcopy, dict, drop, dropWhile, enumerate, filter, float, floor, foldl, foreach, function_literal, hex, int, iter_brk, iter_end, iterator, json, last, list, log, map, max, max_index, memorize, min, min_index, nature_number, obj, ord, prime_number, random_gen, range, ranged_random_gen, sleep, square, str, streak, sum, take, takeWhile, uri_decoder, uri_encoder, zip, _ref;
    function_literal = function(f) {
      var expr;
      expr = f.toString().replace(/^\s*function\s?\(\s?\)\s?{\s*return\s*([^]*?);?\s*}$/, '$1');
      if (expr.length <= 100) {
        expr = expr.replace(/[\r\n]{1,2}\s*/g, '');
      }
      return expr;
    };
    log = (function() {
      var foo, histories, _log;
      histories = [];
      foo = function(op) {
        return function() {
          var args, ball, expr, f, _i, _len;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          ball = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            f = args[_i];
            if (typeof f === 'function') {
              expr = function_literal(f);
              ball.push("## " + expr + " ==>", f());
            } else {
              ball.push('##', f);
            }
          }
          console[op].apply(console, ball);
          histories.push(ball);
          if (histories.length >= 10) {
            histories.shift();
          }
          return null;
        };
      };
      _log = foo('log');
      _log.histories = histories;
      _log.info = foo('info');
      _log.warn = foo('warn');
      _log.error = _log.err = foo('error');
      return _log;
    })();
    assert = function(f, msg) {
      if (!f()) {
        return console.error("ASSERTION FAILED: " + (msg != null ? msg : function_literal(f)));
      }
    };
    sleep = function(seconds, callback) {
      return setTimeout(callback, seconds * 1000);
    };
    dict = function(pairs) {
      var d, k, v, _i, _len, _ref;
      d = {};
      for (_i = 0, _len = pairs.length; _i < _len; _i++) {
        _ref = pairs[_i], k = _ref[0], v = _ref[1];
        d[k] = v;
      }
      return d;
    };
    _ref = (function() {
      var cp;
      cp = function(root, dep) {
        var k, r, v;
        if (dep === 0 || (root == null) || typeof root !== 'object') {
          return root;
        }
        if (root instanceof Array) {
          r = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = root.length; _i < _len; _i++) {
              v = root[_i];
              _results.push(cp(v, dep - 1));
            }
            return _results;
          })();
        } else {
          r = {};
          for (k in root) {
            v = root[k];
            r[k] = cp(v, dep - 1);
          }
        }
        return r;
      };
      return {
        copy: function(obj, depth) {
          if (depth == null) {
            depth = 1;
          }
          return cp(obj, depth);
        },
        deepcopy: function(obj, depth) {
          if (depth == null) {
            depth = Infinity;
          }
          return cp(obj, depth);
        }
      };
    })(), copy = _ref.copy, deepcopy = _ref.deepcopy;
    int = function(s, base) {
      var r;
      if (typeof s === 'string') {
        r = parseInt(s, base);
        if (!((s.slice != null) && r === parseInt(s.slice(0, -1), base))) {
          return r;
        } else {
          return null;
        }
      } else {
        return parseInt(0 + s);
      }
    };
    float = function(s) {
      if (/^-?[0-9]*(\.[0-9]+)?([eE]-?[0-9]+)?$/.test(s)) {
        return parseFloat(s);
      } else {
        return null;
      }
    };
    str = function(x, base) {
      return x.toString(base);
    };
    bool = function(x) {
      if (x === true || x === false) {
        return x;
      } else {
        return null;
      }
    };
    hex = function(x) {
      return x.toString(16);
    };
    ord = function(c) {
      return c.charCodeAt();
    };
    chr = function(x) {
      return String.fromCharCode(x);
    };
    json = function(it, indent) {
      return JSON.stringify(it, null, indent);
    };
    obj = function(s) {
      return JSON.parse(s);
    };
    Object.defineProperties(String.prototype, {
      format: {
        enumerable: false,
        value: function(args) {
          return this.replace(/\{(\w+)\}/g, function(m, i) {
            if (args[i] != null) {
              return args[i];
            } else {
              return m;
            }
          });
        }
      },
      repeat: {
        enumerable: false,
        value: function(n) {
          var pat, r, _ref1;
          _ref1 = ['', this], r = _ref1[0], pat = _ref1[1];
          while (n > 0) {
            if (n & 1) {
              r += pat;
            }
            n >>= 1;
            pat += pat;
          }
          return r;
        }
      },
      cut: {
        enumerable: false,
        value: function(start_pat, end_pat) {
          var i, j;
          i = this.search(start_pat) + 1;
          if (i === 0) {
            return null;
          }
          j = this.substr(i).search(end_pat);
          if (j === -1) {
            return null;
          }
          return this.substr(i, j);
        }
      }
    });
    Object.defineProperties(Array.prototype, {
      first: {
        get: function() {
          return this[0];
        },
        set: function(v) {
          return this[0] = v;
        }
      },
      second: {
        get: function() {
          return this[1];
        },
        set: function(v) {
          return this[1] = v;
        }
      },
      third: {
        get: function() {
          return this[2];
        },
        set: function(v) {
          return this[2] = v;
        }
      },
      last: {
        get: function() {
          return this[this.length - 1];
        },
        set: function(v) {
          return this[this.length - 1] = v;
        }
      },
      repeat: {
        enumerable: false,
        value: function(n) {
          var pat, r, _ref1;
          _ref1 = [[], this], r = _ref1[0], pat = _ref1[1];
          while (n > 0) {
            if (n & 1) {
              r = r.concat(pat);
            }
            n >>= 1;
            pat = pat.concat(pat);
          }
          return r;
        }
      },
      unique: {
        enumerable: false,
        value: (function() {
          var init;
          init = new Object;
          return function(equal) {
            var i, j, t, x, _i, _j, _len, _len1;
            i = 0;
            t = init;
            if (equal == null) {
              for (j = _i = 0, _len = this.length; _i < _len; j = ++_i) {
                x = this[j];
                if (!(x !== t)) {
                  continue;
                }
                this[i] = t = x;
                i += 1;
              }
            } else {
              for (j = _j = 0, _len1 = this.length; _j < _len1; j = ++_j) {
                x = this[j];
                if (!(t === init || !equal(x, t))) {
                  continue;
                }
                this[i] = t = x;
                i += 1;
              }
            }
            this.splice(i, Infinity);
            return this;
          };
        })()
      }
    });
    Object.defineProperties(Object, {
      len: {
        enumerable: false,
        value: function(d) {
          return Object.keys(d).length;
        }
      },
      extend: {
        enumerable: false,
        value: function() {
          var base, d, defaults, k, v, _i, _len;
          base = arguments[0], defaults = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          for (_i = 0, _len = defaults.length; _i < _len; _i++) {
            d = defaults[_i];
            if (d != null) {
              for (k in d) {
                v = d[k];
                if (base[k] == null) {
                  base[k] = v;
                }
              }
            }
          }
          return base;
        }
      },
      update: {
        enumerable: false,
        value: function() {
          var base, d, k, updates, v, _i, _len;
          base = arguments[0], updates = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          for (_i = 0, _len = updates.length; _i < _len; _i++) {
            d = updates[_i];
            if (d != null) {
              for (k in d) {
                v = d[k];
                base[k] = v;
              }
            }
          }
          return base;
        }
      }
    });
    uri_encoder = function(component_packer) {
      if (component_packer == null) {
        component_packer = str;
      }
      return function(obj) {
        var k, v;
        return ((function() {
          var _results;
          _results = [];
          for (k in obj) {
            v = obj[k];
            _results.push("" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(component_packer(v))));
          }
          return _results;
        })()).join('&');
      };
    };
    uri_decoder = function(component_unpacker) {
      if (component_unpacker == null) {
        component_unpacker = (function(s) {
          return s;
        });
      }
      return function(str) {
        var d, k, s, v, _i, _j, _len, _ref1, _ref2, _ref3;
        d = {};
        _ref2 = (_ref1 = str.match(/[^?=&]+=[^&]*/g)) != null ? _ref1 : [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          s = _ref2[_i];
          _ref3 = s.match(/([^=]+)=(.*)/), _j = _ref3.length - 2, k = _ref3[_j++], v = _ref3[_j++];
          d[decodeURIComponent(k)] = component_unpacker(decodeURIComponent(v));
        }
        return d;
      };
    };
    random_gen = (function() {
      var hash;
      hash = function(x) {
        x = Math.sin(x) * 1e4;
        return x - Math.floor(x);
      };
      return function(seed) {
        var cnt;
        if (seed == null) {
          seed = Math.random();
        }
        cnt = hash(seed);
        return function() {
          return hash(++cnt);
        };
      };
    })();
    ranged_random_gen = function(range, seed) {
      var random;
      if (seed == null) {
        seed = Math.random();
      }
      random = random_gen(seed);
      return function() {
        return Math.floor(random() * range);
      };
    };
    iter_end = new Object;
    iter_brk = new Object;
    nature_number = function(first) {
      var i;
      if (first == null) {
        first = 0;
      }
      i = first - 1;
      return function() {
        return ++i;
      };
    };
    prime_number = function() {
      return filter(function(x) {
        return all(function(p) {
          return x % p !== 0;
        })(takeWhile(function(p) {
          return p * p <= x;
        })(range(2, Infinity)));
      })(range(2, Infinity));
    };
    range = function() {
      var args, i, start, step, stop;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 0) {
        i = -1;
        return function() {
          return ++i;
        };
      } else if (args.length === 1) {
        stop = args[0];
        i = -1;
        return function() {
          if (++i < stop) {
            return i;
          } else {
            return iter_end;
          }
        };
      } else if (args.length === 2) {
        start = args[0], stop = args[1];
        if (start < stop) {
          i = start - 1;
          return function() {
            if (++i < stop) {
              return i;
            } else {
              return iter_end;
            }
          };
        } else {
          i = start + 1;
          return function() {
            if (--i > stop) {
              return i;
            } else {
              return iter_end;
            }
          };
        }
      } else {
        start = args[0], stop = args[1], step = args[2];
        if (stop !== start && (stop - start) * step < 0) {
          throw 'ERR IN range(): YOU ARE CREATING AN UNLIMITTED RANGE';
        }
        i = start - step;
        if (start < stop) {
          return function() {
            if ((i += step) < stop) {
              return i;
            } else {
              return iter_end;
            }
          };
        } else {
          return function() {
            if ((i += step) > stop) {
              return i;
            } else {
              return iter_end;
            }
          };
        }
      }
    };
    iterator = function(iterable, replaced_end) {
      var i;
      if (typeof iterable === 'function') {
        return iterable;
      }
      if (!iterable instanceof Array) {
        throw 'ERR IN iterator(): ONLY Array & Iterator IS ACCEPTABLE';
      }
      i = -1;
      return function() {
        i += 1;
        if (i < iterable.length) {
          if (iterable[i] === iter_end) {
            if (replaced_end == null) {
              throw 'ERR IN iterator(): iterator.end APPEARS IN LIST, PASS A SECOND ARG FOR REPLACEMENT';
            }
            return replaced_end;
          } else {
            return iterable[i];
          }
        } else {
          return iter_end;
        }
      };
    };
    Object.defineProperties(iterator, {
      end: {
        writable: false,
        configurable: false,
        enumerable: false,
        value: iter_end
      }
    });
    list = function(iterable) {
      var x, _results;
      if (typeof iterable !== 'function') {
        return iterable;
      }
      _results = [];
      while ((x = iterable()) !== iter_end) {
        _results.push(x);
      }
      return _results;
    };
    enumerate = function(iterable, replaced_end) {
      var i, keys;
      if (iterable instanceof Array) {
        iterable = iterator(iterable);
      }
      if (typeof iterable === 'function') {
        return zip((function() {
          var i;
          i = -1;
          return function() {
            return ++i;
          };
        })(), iterable);
      } else {
        keys = Object.keys(iterable);
        i = -1;
        return function() {
          var k;
          if (++i < keys.length) {
            return [(k = keys[i]), iterable[k]];
          } else {
            return iter_end;
          }
        };
      }
    };
    take = function(n) {
      if (typeof n === 'number') {
        return function(iter) {
          var c;
          iter = iterator(iter);
          c = -1;
          return function() {
            if (++c < n) {
              return iter();
            } else {
              return iter_end;
            }
          };
        };
      } else {
        return takeWhile(n);
      }
    };
    takeWhile = function(ok) {
      return function(iter) {
        iter = iterator(iter);
        return function() {
          var x;
          if ((x = iter()) !== iter_end && ok(x)) {
            return x;
          } else {
            return iter_end;
          }
        };
      };
    };
    drop = function(n) {
      if (typeof n === 'number') {
        return function(iter) {
          var finished, i, _i;
          iter = iterator(iter);
          finished = false;
          for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
            finished || (finished = iter() === iter_end);
            if (finished) {
              break;
            }
          }
          if (finished) {
            return function() {
              return iter_end;
            };
          } else {
            return iter;
          }
        };
      } else {
        return dropWhile(n);
      }
    };
    dropWhile = function(ok) {
      return function(iter) {
        var x;
        iter = iterator(iter);
        while (ok(x = iter()) && x !== iter_end) {
          null;
        }
        return function() {
          var _ref1, _x;
          _ref1 = [x, iter()], _x = _ref1[0], x = _ref1[1];
          return _x;
        };
      };
    };
    map = function(f) {
      return function(iter) {
        iter = iterator(iter);
        return function() {
          var x;
          if ((x = iter()) !== iter_end) {
            return f(x);
          } else {
            return iter_end;
          }
        };
      };
    };
    filter = function(ok) {
      return function(iter) {
        iter = iterator(iter);
        return function() {
          var x;
          while (!ok(x = iter()) && x !== iter_end) {
            null;
          }
          return x;
        };
      };
    };
    foldl = function(f, r) {
      return function(iter) {
        var x;
        iter = iterator(iter);
        while ((x = iter()) !== iter_end) {
          r = f(r, x);
        }
        return r;
      };
    };
    streak = function(n) {
      return function(iter) {
        var buf;
        iter = iterator(iter);
        buf = [];
        return function() {
          var x;
          if ((x = iter()) === iter_end) {
            return iter_end;
          }
          buf.push(x);
          if (buf.length > n) {
            buf.shift(1);
          }
          return buf.slice(0);
        };
      };
    };
    concat = function() {
      var current_index, i, iter, iters, _i, _len, _ref1;
      iters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (i = _i = 0, _len = iters.length; _i < _len; i = ++_i) {
        iter = iters[i];
        iters[i] = iterator(iter);
      }
      _ref1 = [iters[0], 0], iter = _ref1[0], current_index = _ref1[1];
      return function() {
        var x;
        if ((x = iter()) !== iter_end) {
          return x;
        } else if (++current_index < iters.length) {
          iter = iters[current_index];
          return iter();
        } else {
          return iter_end;
        }
      };
    };
    zip = function() {
      var finished, iter, iters;
      iters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      iters = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = iters.length; _i < _len; _i++) {
          iter = iters[_i];
          _results.push(iterator(iter));
        }
        return _results;
      })();
      finished = (function() {
        var another_end, any_is_end;
        another_end = new Object;
        any_is_end = any(function(x) {
          return x === another_end;
        });
        return function(ls) {
          return any_is_end(iterator(ls, another_end));
        };
      })();
      return function() {
        var next;
        next = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = iters.length; _i < _len; _i++) {
            iter = iters[_i];
            _results.push(iter());
          }
          return _results;
        })();
        if (finished(next)) {
          return iter_end;
        } else {
          return next;
        }
      };
    };
    cart = (function() {
      var apply_vector, inc_vector;
      inc_vector = function(limits) {
        var len_minus_1;
        len_minus_1 = limits.length - 1;
        return function(vec) {
          var i;
          i = len_minus_1;
          while (!(++vec[i] < limits[i] || i <= 0)) {
            vec[i--] = 0;
          }
          return vec;
        };
      };
      apply_vector = function(space) {
        var len;
        len = space.length;
        return function(vec) {
          var i, _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
            _results.push(space[i][vec[i]]);
          }
          return _results;
        };
      };
      return function() {
        var get_value, i, inc, iters, limits, set, sets, v;
        iters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        sets = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = iters.length; _i < _len; _i++) {
            set = iters[_i];
            _results.push(list(set));
          }
          return _results;
        })();
        limits = (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = 0, _ref1 = sets.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results.push(sets[i].length);
          }
          return _results;
        })();
        inc = inc_vector(limits);
        get_value = apply_vector(sets);
        v = (function() {
          var _i, _ref1, _results;
          _results = [];
          for (i = _i = 0, _ref1 = sets.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results.push(0);
          }
          return _results;
        })();
        return function() {
          var r;
          if (v[0] < limits[0]) {
            r = get_value(v);
            inc(v);
            return r;
          } else {
            return iter_end;
          }
        };
      };
    })();
    foreach = function(iterable, callback, fruit) {
      var iter, x;
      iter = iterator(iterable);
      while ((x = iter()) !== iter_end) {
        if (callback(x, fruit) === iter_brk) {
          break;
        }
      }
      return fruit;
    };
    Object.defineProperties(foreach, {
      "break": {
        writable: false,
        configurable: false,
        enumerable: false,
        value: iter_brk
      }
    });
    best = function(better) {
      return function(iter) {
        var it, r;
        iter = iterator(iter);
        if ((r = iter()) === iter_end) {
          return null;
        }
        while ((it = iter()) !== iter_end) {
          r = better(it, r) ? it : r;
        }
        return r;
      };
    };
    all = function(f) {
      if (typeof f !== 'function') {
        f = (function(x) {
          return x === f;
        });
      }
      return function(iter) {
        var x;
        iter = iterator(iter);
        while ((x = iter()) !== iter_end) {
          if (!f(x)) {
            return false;
          }
        }
        return true;
      };
    };
    any = function(f) {
      var all_not;
      all_not = all(function(x) {
        return !f(x);
      });
      return function(iter) {
        return !(all_not(iter));
      };
    };
    last = function(iter, empty_sign) {
      var r, x;
      iter = iterator(iter);
      r = empty_sign;
      while ((x = iter()) !== iter_end) {
        r = x;
      }
      return r;
    };
    church = function(n) {
      var iter;
      iter = function(f, n, r) {
        if (n === 0) {
          return r;
        } else {
          return iter(f, n - 1, f(r));
        }
      };
      return function(f) {
        return function(x) {
          return iter(f, n + 0, x);
        };
      };
    };
    Y = function(f) {
      return (function(x) {
        return x(x);
      })((function(x) {
        return f((function(y) {
          return (x(x))(y);
        }));
      }));
    };
    memorize = function(f, get_key) {
      var cache;
      if (get_key == null) {
        get_key = (function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return json(args);
        });
      }
      cache = {};
      return function() {
        var args, cached, key, r;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        key = get_key.apply(null, args);
        cached = cache[key];
        if (cached != null) {
          return cached;
        } else {
          r = f.apply(null, args);
          cache[key] = r;
          return r;
        }
      };
    };
    square = function(n) {
      return n * n;
    };
    cube = function(n) {
      return n * n * n;
    };
    abs = Math.abs;
    floor = Math.floor;
    ceil = Math.ceil;
    accept_multi_or_array = function(f) {
      return function() {
        var arr;
        arr = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return f(arr.length === 1 && arr.first instanceof Array ? arr.first : arr);
      };
    };
    sum = accept_multi_or_array(function(arr) {
      var r, x, _i, _len;
      if (arr.length === 1 && arr.first instanceof Array) {
        arr = arr.first;
      }
      r = 0;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        x = arr[_i];
        r += x;
      }
      return r;
    });
    max = accept_multi_or_array(function(arr) {
      return best(function(a, b) {
        return a > b;
      })(arr);
    });
    min = accept_multi_or_array(function(arr) {
      return best(function(a, b) {
        return a < b;
      })(arr);
    });
    max_index = accept_multi_or_array(function(arr) {
      var _i, _ref1, _results;
      return best(function(i, j) {
        return arr[i] > arr[j];
      })((function() {
        _results = [];
        for (var _i = 0, _ref1 = arr.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
    });
    min_index = accept_multi_or_array(function(arr) {
      var _i, _ref1, _results;
      return best(function(i, j) {
        return arr[i] < arr[j];
      })((function() {
        _results = [];
        for (var _i = 0, _ref1 = arr.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
    });
    return {
      log: log,
      assert: assert,
      sleep: sleep,
      dict: dict,
      copy: copy,
      deepcopy: deepcopy,
      int: int,
      float: float,
      bool: bool,
      str: str,
      hex: hex,
      ord: ord,
      chr: chr,
      json: json,
      obj: obj,
      uri_encoder: uri_encoder,
      uri_decoder: uri_decoder,
      iterator: iterator,
      enumerate: enumerate,
      range: range,
      nature_number: nature_number,
      prime_number: prime_number,
      random_gen: random_gen,
      ranged_random_gen: ranged_random_gen,
      map: map,
      filter: filter,
      take: take,
      takeWhile: takeWhile,
      drop: drop,
      dropWhile: dropWhile,
      streak: streak,
      concat: concat,
      zip: zip,
      cart: cart,
      list: list,
      last: last,
      foldl: foldl,
      best: best,
      all: all,
      any: any,
      foreach: foreach,
      church: church,
      Y: Y,
      memorize: memorize,
      square: square,
      cube: cube,
      abs: abs,
      floor: floor,
      ceil: ceil,
      sum: sum,
      max: max,
      min: min,
      max_index: max_index,
      min_index: min_index
    };
  })();

  if (typeof window !== "undefined" && window !== null) {
    window.coffee_mate = coffee_mate;
    if (window._ == null) {
      window._ = coffee_mate;
    }
  } else {
    module.exports = coffee_mate;
  }

}).call(this);

//# sourceMappingURL=coffee_mate.js.map
